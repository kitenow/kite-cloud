service: helloworld

frameworkVersion: "2"

custom:
  env: ${file(./env/${opt:stage,'local'}.json)}
  prune:
    automatic: true
    number: 3
  warmup:
    a4Warmer:
      enabled: false
      events:
        - schedule: cron(0/5 15-17 ? * MON-FRI *)
      concurrency: 1
    b4Warmer:
      enabled: false
      events:
        - schedule: cron(0/5 6-7 ? * MON-FRI *)
        - schedule: cron(0/5 22-23 ? * MON-FRI *)
        - schedule: cron(0/5 * ? * SAT-SUN *)
      concurrency: 1
    testWarmer:
      enabled: false
  serverless-layers:
    dependenciesPath: package.json
    compatibleRuntimes: [nodejs14.x]
    layersDeploymentBucket: "helloworld-layer-bucket"    

package:
  individually: true
  exclude:
    - node_modules/**
    - .warmup/**

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: ap-southeast-1
  memorySize: 256
  environment:
    DB_CONSTRING: ${self:custom.env.DB_CONSTRING}
    REDIS_HOST: ${self:custom.env.REDIS_HOST}
    REDIS_PORT: ${self:custom.env.REDIS_PORT}
    REDIS_PW: ${self:custom.env.REDIS_PW}
    #NODE_PATH: "./:/opt/node_modules"  

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello/get
          method: get
          cors: true

  func01:
    handler: ./functions/func01.func01
    events:
      - schedule:
          name: func01-cron
          description: 'func01-cron'
          rate: cron(0 12 * * ? *)
          enabled: true
          input:
            keyValue: { "svr_value" : '${opt:stage}' }

  func02:
    handler: ./functions/func02.func02
    events:
      - http:
          path: func02/get
          method: get
          cors: true

  func03:
    handler: ./functions/func03.func03
    events:
      - http:
          path: func03/get
          method: get
          cors: true


plugins:
  - serverless-offline
  - serverless-prune-plugin
  - serverless-layers
  - serverless-plugin-warmup
